import argparse
import configparser
import sys

DELIMITER = ','
SCOPES_PER_STEP = 10
STEPS = list(range(10, 100, 10)) + list(range(100, 500, 100)) + list(range(500, 1501, 500))
TOP_SCOPE = 10
COLLECTOR = 'traceroutev4_topology'


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('input', help='input CSV generated by get_peers_per_scope.py')
    parser.add_argument('output_dir', help='output directory for config files')
    args = parser.parse_args()

    output_dir = args.output_dir
    if not output_dir.endswith('/'):
        output_dir += '/'

    config = configparser.ConfigParser()
    config.add_section('input')
    config.set('input', 'collector', COLLECTOR)

    scopes = list()
    with open(args.input, 'r') as f:
        f.readline()
        for line in f:
            asn, peers = map(int, line.strip().split(DELIMITER))
            if asn == -1:
                continue
            scopes.append((peers, asn))
    scopes.sort()
    for step in STEPS:
        idx = 0
        while idx < len(scopes) and scopes[idx][0] < step:
            idx += 1
        if idx == len(scopes):
            print(f'No scopes found for step size {step}. Aborting.')
            break
        end_idx_plus_one = idx + SCOPES_PER_STEP
        if end_idx_plus_one > len(scopes):
            print(f'Not enough scopes available for step {step}. '
                  f'Selecting remaining scopes and aborting.')
            end_idx_plus_one = len(scopes)
        step_scopes = list(zip(*scopes[idx:end_idx_plus_one]))
        if not step_scopes:
            break
        peers, asns = step_scopes
        config.set('input', 'scopes', DELIMITER.join(map(str, asns)))
        config.set('input', 'peers', DELIMITER.join(map(str, peers)))
        with open(output_dir + str(step) + '.ini', 'w') as f:
            config.write(f)
    top_scopes = list(zip(*scopes[-TOP_SCOPE:]))
    if top_scopes:
        peers, asns = top_scopes
        config.set('input', 'scopes', DELIMITER.join(map(str, asns)))
        config.set('input', 'peers', DELIMITER.join(map(str, peers)))
        with open(output_dir + 'top.ini', 'w') as f:
            config.write(f)


if __name__ == '__main__':
    main()
    sys.exit(0)
